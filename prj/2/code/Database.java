import java.sql.*;
import java.util.ArrayList;


public class Database {

  public Connection con;

  /**
   * Constructor for database access
   */
  public Database() {
    try {
      con = DriverManager
          .getConnection("jdbc:mariadb://localhost:3306", "root", "password");
    } catch (SQLException e) {
      e.printStackTrace();
    }
  }

  /**
   * Adds a book to the database.
   *
   * @param t the title of the book
   * @param a the author of the book
   * @param i the isbn number of the book
   * @throws SQLException It could throw this when the query is executed
   */
  public void addBook(String t, String a, int i) throws SQLException {
    // create a Statement from the connection
    Statement stmt = con.createStatement();
    String update = "INSERT INTO `library`.`Books` (`title`, `author`, `isbn`, `availible`) "
        + "VALUES ('" + t + "', '" + a + "', '" + i + "', 1)";
    stmt.executeUpdate(update);
  }

  /**
   * Adds a member to the library
   *
   * @param first The user's first name
   * @param last The user's last name
   * @throws SQLException It could throw this when the query is executed
   */
  public void addUser(String first, String last) throws SQLException {
    Statement stmt = con.createStatement();
    stmt.executeUpdate("INSERT INTO `library`.`Users` (`firstName`, `lastName`, `timeCreated`) "
        + "VALUES ('" + first + "', '" + last + "', CURRENT_TIMESTAMP)");
  }

  /**
   * Checks a book out of the library to a specific user
   *
   * @param bookId The autogenerated book ID
   * @param userId The autogenerated user ID (library card number)
   * @throws SQLException It could throw this when the query is executed
   */
  public void checkOut(int bookId, int userId) throws SQLException {
    Statement stmt = con.createStatement();
    stmt.executeUpdate("INSERT INTO `library`.`userbooks` (`bookID`, `userID`, `dateCheckedOut`) "
        + "VALUES ('" + bookId + "', '" + userId + "', CURRENT_TIMESTAMP )");
    stmt.executeUpdate("UPDATE `library`.`Books` t SET t.`availible` = 0 WHERE t.`id` =" + bookId);
  }

  /**
   * Return's a user's book to the library
   *
   * @param bookId The autogenerated book ID
   * @throws SQLException It could throw this when the query is executed
   */
  public void returnBook(int bookId) throws SQLException {
    Statement stmt = con.createStatement();
    stmt.executeUpdate(
        "UPDATE `library`.`UserBooks` t SET t.`dateReturned` = CURRENT_TIMESTAMP WHERE t.`bookID` ="
            + bookId);
    stmt.executeUpdate("UPDATE `library`.`Books` t SET t.`availible` = 1 WHERE t.`id` =" + bookId);
  }

  /**
   * This method is for accessing all the unique ID numbers of the books in the database in an
   * ArrayList
   *
   * @return returns an ArrayList of the ID's of the books in the database
   * @throws SQLException It could throw this when the query is executed
   */
  public ArrayList<String> getBooks() throws SQLException {
    Statement stmt = con.createStatement();

    String SQL = "SELECT * FROM library.books";

    ResultSet rs = stmt.executeQuery(SQL);
    return resultToArrayList(rs);
  }

  /**
   * This method is for accessing all the unique ID numbers of the users in the database in an
   * ArrayList
   *
   * @return returns an ArrayList of the user IDs in the database
   * @throws SQLException It could throw this when the query is executed
   */
  public ArrayList<String> getUsers() throws SQLException {
    Statement stmt = con.createStatement();

    String SQL = "SELECT * FROM library.users";

    ResultSet rs = stmt.executeQuery(SQL);
    return resultToArrayList(rs);
  }

  /**
   * This method is for accessing all the unique ID numbers of the books in the database that have
   * been checked out in an ArrayList
   *
   * @return returns an ArrayList of the book's IDs that have been checked out in the database
   * @throws SQLException It could throw this when the query is executed
   */
  public ArrayList<String> getUserBooks() throws SQLException {
    Statement stmt = con.createStatement();

    String SQL = "SELECT * FROM library.userbooks";

    ResultSet rs = stmt.executeQuery(SQL);
    return resultToArrayList(rs);
  }


  /**
   * Returns a specific user's unique ID number
   *
   * @param last The user's last name
   * @return returns the user's ID number
   * @throws SQLException It could throw this when the query is executed
   */
  public ArrayList<String> getUserID(String last) throws SQLException {
    Statement stmt = con.createStatement();

    ResultSet rs = stmt
        .executeQuery("SELECT id FROM `library`.`Users` WHERE `lastName` = \"" + last + "\"");

    return resultToArrayList(rs);
  }


  /**
   * A method to turn a result list from the database into an ArrayList
   *
   * @param rs A result set to turn into an ArrayList
   * @return The ArrayList created
   * @throws SQLException It could throw this when the query is executed
   */
  private ArrayList<String> resultToArrayList(ResultSet rs) throws SQLException {
    ArrayList<String> result = new ArrayList<String>();
    while (rs.next()) {
      result.add(rs.getString(1));
    }
    return result;
  }

  /**
   * Uses DBTablePrinter class to print the books in a user friendly table
   *
   * @throws SQLException It could throw this when the query is executed
   */
  public void getBookTable() throws SQLException {
    Statement stmt = con.createStatement();

    String SQL = "SELECT * FROM library.books";

    ResultSet rs = stmt.executeQuery(SQL);

    DBTablePrinter.printResultSet(rs);
  }

}

